/*
 * Copyright 2018 Diffblue Limited
 *
 * Diffblue Limited licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.univocity.parsers.csv;

import com.diffblue.deeptestutils.Reflector;
import com.univocity.parsers.csv.CsvFormat;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.lang.reflect.InvocationTargetException;

public class CsvFormatTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: CsvFormat */

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 190 branch to line 190
   */

  @Test
  public void isCharToEscapeQuoteEscapingInputNotNullOutputFalse()
      throws InvocationTargetException {

    // Arrange
    final CsvFormat objectUnderTest =
        (CsvFormat)Reflector.getInstance("com.univocity.parsers.csv.CsvFormat");
    Reflector.setField(objectUnderTest, "comment", '\u0000');
    Reflector.setField(objectUnderTest, "lineSeparator", null);
    Reflector.setField(objectUnderTest, "normalizedNewline", '\u0000');
    objectUnderTest.setQuote('\u0000');
    objectUnderTest.setDelimiter('\u0000');
    Reflector.setField(objectUnderTest, "charToEscapeQuoteEscaping", null);
    objectUnderTest.setQuoteEscape('\u0000');
    Reflector.setField(objectUnderTest, "lineSeparatorString", null);
    final char ch = '\u0000';

    // Act
    final boolean retval = objectUnderTest.isCharToEscapeQuoteEscaping(ch);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 190 branch to line 190
   */

  @Test
  public void isCharToEscapeQuoteEscapingInputNotNullOutputFalse2()
      throws InvocationTargetException {

    // Arrange
    final CsvFormat objectUnderTest =
        (CsvFormat)Reflector.getInstance("com.univocity.parsers.csv.CsvFormat");
    Reflector.setField(objectUnderTest, "comment", '\u0000');
    Reflector.setField(objectUnderTest, "lineSeparator", null);
    Reflector.setField(objectUnderTest, "normalizedNewline", '\u0000');
    objectUnderTest.setQuote('\u8001');
    objectUnderTest.setDelimiter('\u0000');
    Reflector.setField(objectUnderTest, "charToEscapeQuoteEscaping", null);
    objectUnderTest.setQuoteEscape('\u0001');
    Reflector.setField(objectUnderTest, "lineSeparatorString", null);
    final char ch = '\u0000';

    // Act
    final boolean retval = objectUnderTest.isCharToEscapeQuoteEscaping(ch);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 190 branch to line 190
   */

  @Test
  public void isCharToEscapeQuoteEscapingInputNotNullOutputTrue() throws InvocationTargetException {

    // Arrange
    final CsvFormat objectUnderTest =
        (CsvFormat)Reflector.getInstance("com.univocity.parsers.csv.CsvFormat");
    Reflector.setField(objectUnderTest, "comment", '\u0000');
    Reflector.setField(objectUnderTest, "lineSeparator", null);
    Reflector.setField(objectUnderTest, "normalizedNewline", '\u0000');
    objectUnderTest.setQuote('\u8001');
    objectUnderTest.setDelimiter('\u0000');
    Reflector.setField(objectUnderTest, "charToEscapeQuoteEscaping", null);
    objectUnderTest.setQuoteEscape('\u0001');
    Reflector.setField(objectUnderTest, "lineSeparatorString", null);
    final char ch = '\u0001';

    // Act
    final boolean retval = objectUnderTest.isCharToEscapeQuoteEscaping(ch);

    // Assert result
    Assert.assertEquals(true, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 129 branch to line 129
   */

  @Test
  public void isDelimiterInputNotNullOutputFalse() throws InvocationTargetException {

    // Arrange
    final CsvFormat objectUnderTest =
        (CsvFormat)Reflector.getInstance("com.univocity.parsers.csv.CsvFormat");
    Reflector.setField(objectUnderTest, "comment", '\u0000');
    Reflector.setField(objectUnderTest, "lineSeparator", null);
    Reflector.setField(objectUnderTest, "normalizedNewline", '\u0000');
    objectUnderTest.setQuote('\u0000');
    objectUnderTest.setDelimiter('\u0001');
    Reflector.setField(objectUnderTest, "charToEscapeQuoteEscaping", null);
    objectUnderTest.setQuoteEscape('\u0000');
    Reflector.setField(objectUnderTest, "lineSeparatorString", null);
    final char ch = '\u0000';

    // Act
    final boolean retval = objectUnderTest.isDelimiter(ch);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 129 branch to line 129
   */

  @Test
  public void isDelimiterInputNotNullOutputTrue() throws InvocationTargetException {

    // Arrange
    final CsvFormat objectUnderTest =
        (CsvFormat)Reflector.getInstance("com.univocity.parsers.csv.CsvFormat");
    Reflector.setField(objectUnderTest, "comment", '\u0000');
    Reflector.setField(objectUnderTest, "lineSeparator", null);
    Reflector.setField(objectUnderTest, "normalizedNewline", '\u0000');
    objectUnderTest.setQuote('\u0000');
    objectUnderTest.setDelimiter('\u0000');
    Reflector.setField(objectUnderTest, "charToEscapeQuoteEscaping", null);
    objectUnderTest.setQuoteEscape('\u0000');
    Reflector.setField(objectUnderTest, "lineSeparatorString", null);
    final char ch = '\u0000';

    // Act
    final boolean retval = objectUnderTest.isDelimiter(ch);

    // Assert result
    Assert.assertEquals(true, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 100 branch to line 100
   */

  @Test
  public void isQuoteEscapeInputNotNullOutputFalse() throws InvocationTargetException {

    // Arrange
    final CsvFormat objectUnderTest =
        (CsvFormat)Reflector.getInstance("com.univocity.parsers.csv.CsvFormat");
    Reflector.setField(objectUnderTest, "comment", '\u0000');
    Reflector.setField(objectUnderTest, "lineSeparator", null);
    Reflector.setField(objectUnderTest, "normalizedNewline", '\u0000');
    objectUnderTest.setQuote('\u0000');
    objectUnderTest.setDelimiter('\u0000');
    Reflector.setField(objectUnderTest, "charToEscapeQuoteEscaping", null);
    objectUnderTest.setQuoteEscape('\u0001');
    Reflector.setField(objectUnderTest, "lineSeparatorString", null);
    final char ch = '\u0000';

    // Act
    final boolean retval = objectUnderTest.isQuoteEscape(ch);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 100 branch to line 100
   */

  @Test
  public void isQuoteEscapeInputNotNullOutputTrue() throws InvocationTargetException {

    // Arrange
    final CsvFormat objectUnderTest =
        (CsvFormat)Reflector.getInstance("com.univocity.parsers.csv.CsvFormat");
    Reflector.setField(objectUnderTest, "comment", '\u0000');
    Reflector.setField(objectUnderTest, "lineSeparator", null);
    Reflector.setField(objectUnderTest, "normalizedNewline", '\u0000');
    objectUnderTest.setQuote('\u0000');
    objectUnderTest.setDelimiter('\u0000');
    Reflector.setField(objectUnderTest, "charToEscapeQuoteEscaping", null);
    objectUnderTest.setQuoteEscape('\u0000');
    Reflector.setField(objectUnderTest, "lineSeparatorString", null);
    final char ch = '\u0000';

    // Act
    final boolean retval = objectUnderTest.isQuoteEscape(ch);

    // Assert result
    Assert.assertEquals(true, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 71 branch to line 71
   */

  @Test
  public void isQuoteInputNotNullOutputFalse() throws InvocationTargetException {

    // Arrange
    final CsvFormat objectUnderTest =
        (CsvFormat)Reflector.getInstance("com.univocity.parsers.csv.CsvFormat");
    Reflector.setField(objectUnderTest, "comment", '\u0000');
    Reflector.setField(objectUnderTest, "lineSeparator", null);
    Reflector.setField(objectUnderTest, "normalizedNewline", '\u0000');
    objectUnderTest.setQuote('\u0001');
    objectUnderTest.setDelimiter('\u0000');
    Reflector.setField(objectUnderTest, "charToEscapeQuoteEscaping", null);
    objectUnderTest.setQuoteEscape('\u0000');
    Reflector.setField(objectUnderTest, "lineSeparatorString", null);
    final char ch = '\u0000';

    // Act
    final boolean retval = objectUnderTest.isQuote(ch);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 71 branch to line 71
   */

  @Test
  public void isQuoteInputNotNullOutputTrue() throws InvocationTargetException {

    // Arrange
    final CsvFormat objectUnderTest =
        (CsvFormat)Reflector.getInstance("com.univocity.parsers.csv.CsvFormat");
    Reflector.setField(objectUnderTest, "comment", '\u0000');
    Reflector.setField(objectUnderTest, "lineSeparator", null);
    Reflector.setField(objectUnderTest, "normalizedNewline", '\u0000');
    objectUnderTest.setQuote('\u0000');
    objectUnderTest.setDelimiter('\u0000');
    Reflector.setField(objectUnderTest, "charToEscapeQuoteEscaping", null);
    objectUnderTest.setQuoteEscape('\u0000');
    Reflector.setField(objectUnderTest, "lineSeparatorString", null);
    final char ch = '\u0000';

    // Act
    final boolean retval = objectUnderTest.isQuote(ch);

    // Assert result
    Assert.assertEquals(true, retval);
  }
}
